@page "/password"
@inject IJSRuntime JsRuntime

<PageTitle>Password Generator</PageTitle>

<h1>Password Generator</h1>

<br />
<article>
    <h3>
        permission characters
    </h3>

    <h4>
        Character Types
    </h4>
    <div class="selectchar">
        <span>
            <input type="checkbox" name="lowercase" @bind="lowercase" />
            <label>lowercase</label>
        </span>
        <span>
            <input type="checkbox" name="uppercase" @bind="uppercase" />
            <label>UPPERCASE</label>
        </span>
        <span>
            <input type="checkbox" name="number" @bind="number" />
            <label>Number</label>
        </span>
    </div>

    <h4>
        Symbols
    </h4>
    <button @onclick="SelectAllChar">Select All special chars</button>
    <div class="selectchar">
        @foreach (var item in specChar0)
        {   
            <span>
                <input type="checkbox" @bind="isAllowed[item]" />
                <label>@Convert.ToChar(item)</label>
            </span>   
        }
        @foreach(var item in specChar1)
        {
            <span>
                <input type="checkbox" @bind="isAllowed[item]" />
                <label>@Convert.ToChar(item)</label>
            </span>  
        }
        @foreach(var item in specChar2)
        {
            <span>
                <input type="checkbox" @bind="isAllowed[item]" />
                <label>@Convert.ToChar(item)</label>
            </span>  
        }
        @foreach(var item in specChar3)
        {
            <span>
                <input type="checkbox" @bind="isAllowed[item]" />
                <label>@Convert.ToChar(item)</label>
            </span>  
        }
    </div>
    <h4>
        Length
    </h4>
    <div>
        <input type="number" name="length" @bind="length"/>
    </div>

    <h3>
        <button @onclick="GeneratePassword">
            GeneratePassword
        </button>
    </h3>

    <p style="display:inline-flex">
        <pre style="padding: 5vw;">
            <code>
                @generatedPassword
            </code>
        </pre>
    </p>

</article>

@code {



    private int currentCount = 0;
    private bool lowercase { get; set; } = true;
    private bool uppercase { get; set; } = true;
    private bool number { get; set; } = true;

    private bool[] isAllowed { get; set; } = Enumerable.Repeat<bool>(false, 128).ToArray();

    private int[] specChar0 { get; set; } = new int[15] { 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47 };
    private int[] specChar1 { get; set; } = new int[7] { 58,59,60,61,62,63,64 };
    private int[] specChar2 { get; set; } = new int[6] { 91,92,93,94,95,96 };
    private int[] specChar3 { get; set; } = new int[4] { 123,124,125,126 };

    private int length { get; set; } = 12;
    private string generatedPassword = "here will generated password";

    private void SelectAllChar()
    {
        Console.WriteLine("select all spec char was called");
        for(int i = 0;i < 15; i++)
        {
            isAllowed[specChar0[i]] = true;
        }
        for(int i = 0;i< 7;i++)
        {
            isAllowed[specChar1[i]] = true;
        }
        for(int i = 0;i< 6;i++)
        {
            isAllowed[specChar2[i]] = true;
        }
        for(int i = 0;i< 4;i++)
        {
            isAllowed[specChar3[i]] = true;
        }
    }

    private void GeneratePassword()
    {
        generatedPassword = "here is genereted password";
        //Check least one permission
        if (!lowercase && !uppercase && !number)
        {
            JsRuntime.InvokeVoidAsync("alert", "Warning! You Should select Least One Character Type"); // Alert
            return;
        }

        for(int i = 48; i <= 57; i++)
        {
            isAllowed[i] = number;
        }
        for(int i = 65; i <= 90; i++)
        {
            isAllowed[i] = uppercase;
        }
        for(int i = 97; i <= 122; i++)
        {
            isAllowed[i] = lowercase;
        }


        //Instantiate random number generator using system-supplied value as seed.
        var random = new Random();
        int asciiLength = 128;
        var passwordInt = new List<int>();
        int tempInt1 = new int();
        for (int i = 0; i < length; i++)
        {
            bool permissonCheck = false;
            while (!permissonCheck)
            {
                tempInt1 = random.Next(asciiLength);
                permissonCheck = CharPermissionCheck(tempInt1);
            }
            passwordInt.Add(tempInt1);
        }
        char[] passwordChar = new char[length];
        for (int i = 0; i < passwordInt.Count;i++)
        {
            passwordChar[i] = Convert.ToChar(passwordInt[i]);
        }
        generatedPassword = String.Join("", passwordChar);
    }

    private bool CharPermissionCheck(int charAscii)
    {
        bool answer = false;

        //switch ascii area
        if (33 <= charAscii && charAscii <= 126)
        {
            answer = isAllowed[charAscii];
        }
        return answer;
    }
}
