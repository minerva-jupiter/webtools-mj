@page "/password"
@inject IJSRuntime JsRuntime

<PageTitle>Password Generator</PageTitle>

<h1>Password Generator</h1>

<br />
<article>
    <h3>
        permission characters
    </h3>

    <h4>
        Character Types
    </h4>
    <div class="selectchar">
        <span>
            <input type="checkbox" name="lowercase" @bind="lowercase" />
            <label>lowercase</label>
        </span>
        <span>
            <input type="checkbox" name="uppercase" @bind="uppercase" />
            <label>UPPERCASE</label>
        </span>
        <span>
            <input type="checkbox" name="number" @bind="number" />
            <label>Number</label>
        </span>
    </div>

    <h4>
        Symbols
    </h4>
    <div class="selectchar">
        <span>
            <input type="checkbox" name="at" @bind="at" />
            <label>＠</label>
        </span>
        <span>
            <input type="checkbox" name="question" @bind="question" />
            <label>?</label>
        </span>
        <span>
            <input type="checkbox" name="exclamation" @bind="exclamation" />
            <label>!</label>
        </span>
        <span>
            <input type="checkbox" name="hyphen" @bind="hyphen" />
            <label>-</label>
        </span>

    </div>
    <h4>
        Length
    </h4>
    <div>
        <input type="number" name="length" @bind="length"/>
    </div>

    <h3>
        <button @onclick="GeneratePassword">
            GeneratePassword
        </button>
    </h3>

    <p style="display:inline-flex">
        <pre style="padding: 5vw;">
            <code>
                @generatedPassword
            </code>
        </pre>
    </p>

</article>

@code {
    private int currentCount = 0;
    private bool lowercase { get; set; } = true;
    private bool uppercase { get; set; } = true;
    private bool number { get; set; } = true;
    private bool at { get; set; } = true;
    private bool question { get; set; } = true;
    private bool exclamation { get; set; } = true;
    private bool hyphen { get; set; } = true;

    private int length { get; set; } = 12;
    private string generatedPassword = "here will generated password";

    private void IncrementCount()
    {
        currentCount++;
    }

    private void GeneratePassword()
    {
        generatedPassword = "here is genereted password";
        //Check least one permission
        if (!lowercase && !uppercase && !number)
        {
            JsRuntime.InvokeVoidAsync("alert", "Warning! You Should select Least One Character Type"); // Alert
            return;
        }

        //Instantiate random number generator using system-supplied value as seed.
        var random = new Random();
        int asciiLength = 128;
        var passwordInt = new List<int>();
        int tempInt1 = new int();
        for (int i = 0; i < length; i++)
        {
            bool permissonCheck = false;
            while (!permissonCheck)
            {
                tempInt1 = random.Next(asciiLength);
                permissonCheck = CharPermissionCheck(tempInt1);
            }
            passwordInt.Add(tempInt1);
        }
        char[] passwordChar = new char[length];
        for (int i = 0; i < passwordInt.Count;i++)
        {
            passwordChar[i] = Convert.ToChar(passwordInt[i]);
        }
        generatedPassword = String.Join("", passwordChar);
    }

    private bool CharPermissionCheck(int charAscii)
    {
        bool answer = false;

        //switch ascii area
        if (33 <= charAscii && charAscii <= 126)
        {
            //check number
            if (number && 48 <= charAscii && charAscii <= 57)
            {
                answer = true;
                return answer;
            }

            //check UPPERCASE
            if (uppercase && 65 <= charAscii && charAscii <= 90)
            {
                answer = true;
                return answer;
            }

            //check lowercase
            if (lowercase && 97 <= charAscii && charAscii <= 122)
            {
                answer = true;
                return answer;
            }
        }
        return answer;
    }
}
